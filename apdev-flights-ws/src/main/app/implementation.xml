<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:validation="http://www.mulesoft.org/schema/mule/validation" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
	xmlns:ws="http://www.mulesoft.org/schema/mule/ws" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw"
	xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata"
	xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/ws http://www.mulesoft.org/schema/mule/ws/current/mule-ws.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd">
	<flow name="getFlightsFlow">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="/flights" allowedMethods="GET" doc:name="getFlightsFlow" />
        <set-variable variableName="airline" value="#[message.inboundProperties.'http.query.params'.airline]" doc:name="setAirlineVariable"/>
        <flow-ref name="setCodeSubFlow" doc:name="Flow Reference"/>
        <validation:is-not-empty message="You must pass the destination as a query parameter called code" exceptionClass="java.lang.IllegalArgumentException" value="#[flowVars.code]" doc:name="Validation"/>
        <choice doc:name="Choice">
            <when expression="#[flowVars.airline == &quot;delta&quot;]">
                <flow-ref name="deltaFlightsImplementationFlow" doc:name="getDeltaFlightsFlow"/>
            </when>
            <when expression="#[flowVars.airline == &quot;united&quot;]">
                <flow-ref name="getUnitedFlightsFlow" doc:name="getUnitedFlightsFlow"/>
            </when>
            <when expression="#[flowVars.airline == &quot;american&quot;]">
                <flow-ref name="americanFlightsImplementationFlow" doc:name="americanFlightsImplementationFlow"/>
            </when>
            <otherwise>
                <flow-ref name="getAllAirlineFlightsFlow" doc:name="Flow Reference"/>
            </otherwise>
        </choice>
        <dw:transform-message doc:name="Transform Message" metadata:id="2fe03a05-92f6-4d0f-bbe3-2fea63afc3e8">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
payload orderBy $.price]]></dw:set-payload>
        </dw:transform-message>
		<logger level="INFO" doc:name="Logger" />
		
	</flow>
	<sub-flow name="setCodeSubFlow">
		<set-variable variableName="code"
			value="#[message.inboundProperties.'http.query.params'.code]"
			doc:name="set airport code variable" />
	</sub-flow>
	<flow name="getUnitedFlightsFlow">
        <http:request config-ref="United_HTTP_Request_Configuration" path="/essentials/united/flights/{destination}" method="GET" doc:name="united REST Request">
            <http:request-builder>
                <http:uri-param paramName="destination" value="#[flowVars.code]"/>
            </http:request-builder>
        </http:request>

		<dw:transform-message doc:name="Transform Message"
			metadata:id="9e9cd215-9f4e-469d-b7e8-b72b6b0b9d15">
			<dw:input-payload mimeType="application/json" />
			<dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload.flights map ((flight , indexOfFlight) -> {
	airlineName: flight.airlineName,
	availableSeats: flight.emptySeats,
	departureDate: flight.departureDate,
	destination: flight.destination,
	flightCode: flight.code,
	origination: flight.origin,
	planeType: flight.planeType,
	price: flight.price
} as :object {
	class : "com.mulesoft.training.Flight"
})]]></dw:set-payload>
		</dw:transform-message>
		<logger level="INFO" doc:name="Logger" />
	</flow>
	<flow name="americanFlightsImplementationFlow">
		<http:request config-ref="American_HTTP_Request_Configuration"
			path="/flights" method="GET" doc:name="American Rest Request">
			<http:request-builder>
				<http:query-param paramName="code" value="#[flowVars.code]" />
			</http:request-builder>
		</http:request>
		<logger level="INFO" doc:name="Logger" />
	</flow>
	<flow name="deltaFlightsImplementationFlow">
		<dw:transform-message doc:name="Transform Message">
			<dw:set-payload><![CDATA[%dw 1.0
%output application/xml
%namespace ns0 http://soap.training.mulesoft.com/
---
{
	ns0#findFlight: {
		destination: flowVars.code as :string
	}
}]]></dw:set-payload>
		</dw:transform-message>
		<ws:consumer config-ref="Delta_Web_Service_Consumer"
			operation="findFlight" doc:name="Delta SOAP Request">
		</ws:consumer>
		<dw:transform-message doc:name="Transform Message"
			metadata:id="22244e8e-0d38-4292-8925-9ea6125eab85">
			<dw:set-payload><![CDATA[%dw 1.0
%output application/java
%namespace ns0 http://soap.training.mulesoft.com/
---
payload.ns0#findFlightResponse.*return map ((return , indexOfReturn) -> {
	airlineName: return.airlineName,
	availableSeats: return.emptySeats,
	departureDate: return.departureDate,
	destination: return.destination,
	flightCode: return.code,
	origination: return.origin,
	planeType: return.planeType,
	price: return.price
} as :object {
	class : "com.mulesoft.training.Flight"
})]]></dw:set-payload>
		</dw:transform-message>
		<logger level="INFO" doc:name="Logger" />

	</flow>
	<flow name="weatherImplementationFlow">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="/weather" doc:name="HTTP" />
		<flow-ref name="setCodeSubFlow" doc:name="Flow Reference" />
		<dw:transform-message doc:name="Transform Message">
			<dw:set-payload><![CDATA[%dw 1.0
%output application/xml
%namespace ns0 http://www.webserviceX.NET
---
{
	ns0#GetCitiesByCountry: {
		ns0#CountryName: flowVars.code as :string
	}
}]]></dw:set-payload>
		</dw:transform-message>
		<ws:consumer config-ref="Weather_Web_Service_Consumer"
			operation="GetCitiesByCountry" doc:name="Web Service Consumer" />
		<logger level="INFO" doc:name="Logger" />
	</flow>
	<flow name="implementationFlow">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="/gather" doc:name="HTTP" />
		<flow-ref name="setCodeSubFlow" doc:name="Flow Reference" />
		<scatter-gather doc:name="Scatter-Gather">
			<processor-chain>
				<dw:transform-message doc:name="Transform Message">
					<dw:set-payload><![CDATA[%dw 1.0
%output application/xml
%namespace ns0 http://www.webserviceX.NET
---
{
	ns0#GetCitiesByCountry: {
		ns0#CountryName: flowVars.code as :string
	}
}]]></dw:set-payload>
				</dw:transform-message>
				<ws:consumer config-ref="Weather_Web_Service_Consumer"
					operation="GetCitiesByCountry" doc:name="Web Service Consumer" />
				<dw:transform-message doc:name="Transform Message"
					metadata:id="c1687df9-2d7e-4174-9da2-1b866709a4d6">
					<dw:set-payload><![CDATA[%dw 1.0
%output application/json
%namespace ns0 http://www.webserviceX.NET
---
[{
	country: payload.ns0#GetCitiesByCountryResponse.ns0#GetCitiesByCountryResult
}]]]></dw:set-payload>
				</dw:transform-message>
				<logger level="INFO" doc:name="Logger" />
			</processor-chain>
			<processor-chain>
				<dw:transform-message doc:name="Transform Message">
					<dw:set-payload><![CDATA[%dw 1.0
%output application/xml
%namespace ns0 http://www.webserviceX.NET
---
{
	ns0#GetCitiesByCountry: {
		ns0#CountryName: flowVars.code as :string
	}
}]]></dw:set-payload>
				</dw:transform-message>
				<ws:consumer config-ref="Weather_Net_Web_Service_Consumer"
					operation="GetCitiesByCountry" doc:name="Web Service Consumer" />
				<dw:transform-message doc:name="Transform Message"
					metadata:id="fa215983-f276-495c-a1a0-03f9acc02e0f">
					<dw:set-payload><![CDATA[%dw 1.0
%output application/json
%namespace ns0 http://www.webserviceX.NET
---
[{
	country: payload.ns0#GetCitiesByCountryResponse.ns0#GetCitiesByCountryResult
}]]]></dw:set-payload>
				</dw:transform-message>
				<logger level="INFO" doc:name="Logger" />
			</processor-chain>
		</scatter-gather>
		<object-to-string-transformer doc:name="Object to String" />
		<logger level="INFO" doc:name="Logger" />
	</flow>
    <flow name="getAllAirlineFlightsFlow">
        <scatter-gather doc:name="Scatter-Gather">
            <processor-chain>
                <flow-ref name="deltaFlightsImplementationFlow" doc:name="Flow Reference"/>
                <filter ref="Filter_Not_Array_list" doc:name="Filter Reference"/>
            </processor-chain>
            <processor-chain>
                <flow-ref name="getUnitedFlightsFlow" doc:name="Flow Reference"/>
                <filter ref="Filter_Not_Array_list" doc:name="Filter Reference"/>
            </processor-chain>
        </scatter-gather>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
flatten payload]]></dw:set-payload>
        </dw:transform-message>
        <logger level="INFO" doc:name="Logger"/>
    </flow>
    <flow name="postFlightFlow">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/flights" allowedMethods="POST" doc:name="HTTP"/>
        <dw:transform-message doc:name="Transform Message" metadata:id="ae0f2b2c-5258-4bf9-bac6-2605c0fc3566">
            <dw:input-payload doc:sample="D:\Vikash\MuleSoft Fundamental Training\Training\MUFundamentals3.9_studentFiles\examples\flights-example.json"/>
            <dw:set-payload resource="classpath:json_flights_playground.dwl"/>
            <dw:set-variable variableName="xml"><![CDATA[%dw 1.0
%output application/xml
---
data: {
	hub: "MUX",
	flights @(airline: payload.airline): {
		code: payload.fromAirportCode
	}
}]]></dw:set-variable>
        </dw:transform-message>
        <logger level="INFO" doc:name="Logger"/>
    </flow>
    <flow name="postMultipleFlightsFlow">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/multipleflights" allowedMethods="POST" doc:name="HTTP"/>
        <dw:transform-message doc:name="Transform Message" metadata:id="db5977a1-a151-490f-acf5-e3adea050b64">
            <dw:input-payload doc:sample="D:\Vikash\MuleSoft Fundamental Training\Training\MUFundamentals3.9_studentFiles\examples\flights-example.xml" mimeType="application/xml"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
%namespace ns0 http://soap.training.mulesoft.com/
%type currency = :string {format: "###.00"}
%type flight = :object {class: "com.mulesoft.training.Flight"}
---
flights: payload.ns0#listAllFlightsResponse.*return map {
		destination: $.destination,
		price: $.price as :number as :currency,
		planeType: upper $.planeType replace /(BOING)/ with "BOEING",
		departureDate: $.departureDate as :date {format: "yyyy/MM/dd"} as :string {format: "MMM, dd, yyyy"},
		availableSeats: $.emptySeats as :number,
		//totalSeats: getNumSeats($.planeType)
		totalSeats: lookup("getTotalSeatsFlow", {type: $.planeType})
	}]]></dw:set-payload>
        </dw:transform-message>
        <logger level="INFO" doc:name="Logger"/>
    </flow>
    <flow name="getTotalSeatsFlow">
        <expression-component doc:name="Expression"><![CDATA[if(payload.type.contains('737')){
	payload = 150;
}else{
	payload = 300;
}]]></expression-component>
    </flow>
</mule>
